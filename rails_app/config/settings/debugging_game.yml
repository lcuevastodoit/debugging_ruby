debugging_game:
  objectives:
    # ROOKIE LEVEL - üê£ Novato
    - key: "rookie_inspect_user"
      title: "Rookie - Inspect User"
      description: "Create a new User and inspect its attributes using Pry"
      expected_commands:
        - "User.new"
        - "inspect"
        - "p @user"
        - "@user.inspect"
      points: 100
      level: "rookie"
      problem: "Create a new User and find what data is stored in the @user variable"
      hints:
        - "Try using User.new to create a new instance"
        - "Use .inspect to see the object's internal state"
        - "The 'p' command is a shortcut for puts with inspect"
      time_limit: 300
      prerequisites: []

    - key: "rookie_create_post"
      title: "Rookie - Create Post"
      description: "Create a new Post and explore its relationships"
      expected_commands:
        - "Post.new"
        - "user"
        - "belongs_to"
        - "save"
      points: 100
      level: "rookie"
      problem: "Create a new Post and understand its relationship with User"
      hints:
        - "Posts belong to users"
        - "Try Post.new(title: 'Test', content: 'Content')"
        - "Check what happens when you try to save without a user"
      time_limit: 300
      prerequisites: ["rookie_inspect_user"]

    # MAGICIAN LEVEL - üé© Mago
    - key: "magician_navigate_methods"
      title: "Magician - Navigate Methods"
      description: "Use Pry navigation commands to explore object methods"
      expected_commands:
        - "ls"
        - "show-method"
        - "cd"
        - "methods"
      points: 150
      level: "magician"
      problem: "Navigate through User class methods and find all validation methods"
      hints:
        - "Use 'ls User' to see available methods"
        - "Try 'show-method User#display_name'"
        - "Use 'cd User' to navigate into the class context"
      time_limit: 400
      prerequisites: ["rookie_create_post"]

    - key: "magician_query_database"
      title: "Magician - Query Database"
      description: "Use ActiveRecord methods to query the database"
      expected_commands:
        - "User.all"
        - "where"
        - "find_by"
        - "count"
      points: 150
      level: "magician"
      problem: "Find all users with admin role and count total posts"
      hints:
        - "Try User.where(role: 'admin')"
        - "Use Post.count to count all posts"
        - "Chain methods like User.where(...).count"
      time_limit: 400
      prerequisites: ["magician_navigate_methods"]

    # SORCERER LEVEL - üîÆ Hechicero
    - key: "sorcerer_set_breakpoint"
      title: "Sorcerer - Set Breakpoint"
      description: "Use debugging breakpoints to pause execution"
      expected_commands:
        - "break"
        - "binding.pry"
        - "debugger"
        - "byebug"
      points: 200
      level: "sorcerer"
      problem: "Add a breakpoint in User#display_name method and inspect variables"
      hints:
        - "Add 'binding.pry' in the method you want to debug"
        - "Restart your Rails console to hit the breakpoint"
        - "Use 'break User#display_name' in pry"
      time_limit: 500
      prerequisites: ["magician_query_database"]

    - key: "sorcerer_step_debugging"
      title: "Sorcerer - Step Through Code"
      description: "Use step commands to walk through code execution"
      expected_commands:
        - "step"
        - "next"
        - "continue"
        - "finish"
      points: 200
      level: "sorcerer"
      problem: "Step through User creation and validation process"
      hints:
        - "Use 'step' to enter into method calls"
        - "Use 'next' to go to the next line"
        - "Use 'continue' to resume execution"
      time_limit: 500
      prerequisites: ["sorcerer_set_breakpoint"]

    # HERO LEVEL - ü¶∏ H√©roe
    - key: "hero_inspect_callstack"
      title: "Hero - Inspect Call Stack"
      description: "Navigate and inspect the call stack during debugging"
      expected_commands:
        - "backtrace"
        - "up"
        - "down"
        - "caller"
      points: 250
      level: "hero"
      problem: "Debug a validation error by inspecting the call stack"
      hints:
        - "Use 'backtrace' to see the call stack"
        - "Use 'up' and 'down' to navigate stack frames"
        - "Inspect variables at different stack levels"
      time_limit: 600
      prerequisites: ["sorcerer_step_debugging"]

    - key: "hero_advanced_queries"
      title: "Hero - Advanced Database Queries"
      description: "Perform complex database operations and debug query issues"
      expected_commands:
        - "joins"
        - "includes"
        - "explain"
        - "to_sql"
      points: 250
      level: "hero"
      problem: "Debug N+1 query problems using includes and explain"
      hints:
        - "Use User.includes(:posts) to preload associations"
        - "Try .explain to see query execution plan"
        - "Use .to_sql to see the generated SQL"
      time_limit: 600
      prerequisites: ["hero_inspect_callstack"]

    # EXPERT LEVEL - üéØ Experto
    - key: "expert_memory_profiling"
      title: "Expert - Memory Profiling"
      description: "Profile memory usage and identify memory leaks"
      expected_commands:
        - "memory_profiler"
        - "ObjectSpace"
        - "GC.stat"
        - "allocated_objects"
      points: 300
      level: "expert"
      problem: "Profile memory usage when creating multiple User objects"
      hints:
        - "Use ObjectSpace.count_objects to see object counts"
        - "Try GC.stat to see garbage collection statistics"
        - "Monitor memory before and after object creation"
      time_limit: 700
      prerequisites: ["hero_advanced_queries"]

    - key: "expert_performance_debugging"
      title: "Expert - Performance Debugging"
      description: "Use profiling tools to identify performance bottlenecks"
      expected_commands:
        - "benchmark"
        - "measure"
        - "profile"
        - "ruby-prof"
      points: 300
      level: "expert"
      problem: "Benchmark different ways of querying users and posts"
      hints:
        - "Use Benchmark.measure to time operations"
        - "Compare User.all vs User.limit performance"
        - "Try different query strategies"
      time_limit: 700
      prerequisites: ["expert_memory_profiling"]

    # ASTRO LEVEL - üöÄ Astronauta
    - key: "astro_metaprogramming_debug"
      title: "Astro - Metaprogramming Debug"
      description: "Debug dynamically created methods and metaprogramming"
      expected_commands:
        - "method"
        - "source_location"
        - "instance_methods"
        - "define_method"
      points: 400
      level: "astro"
      problem: "Debug a dynamically created scope method in User model"
      hints:
        - "Use User.method(:scope_name).source_location"
        - "Try User.instance_methods to see all methods"
        - "Use method(:name) to get method objects"
      time_limit: 800
      prerequisites: ["expert_performance_debugging"]

    - key: "astro_reflection_introspection"
      title: "Astro - Reflection & Introspection"
      description: "Use Ruby's reflection capabilities for deep debugging"
      expected_commands:
        - "reflect_on_association"
        - "column_names"
        - "validators"
        - "instance_variable_get"
      points: 400
      level: "astro"
      problem: "Inspect all associations and validations of User model"
      hints:
        - "Use User.reflect_on_all_associations"
        - "Try User.validators to see all validations"
        - "Use User.column_names for database columns"
      time_limit: 800
      prerequisites: ["astro_metaprogramming_debug"]

    # STAR LEVEL - ‚≠ê Estrella
    - key: "star_production_debugging"
      title: "Star - Production Debugging"
      description: "Debug issues in production-like environment"
      expected_commands:
        - "Rails.logger"
        - "tagged_logging"
        - "log_level"
        - "remote_pry"
      points: 500
      level: "star"
      problem: "Debug a production issue using logs and remote debugging"
      hints:
        - "Use Rails.logger.tagged to add context to logs"
        - "Try different log levels: debug, info, warn, error"
        - "Use structured logging for better debugging"
      time_limit: 900
      prerequisites: ["astro_reflection_introspection"]

    - key: "star_concurrency_debugging"
      title: "Star - Concurrency Debugging"
      description: "Debug multi-threaded and concurrent code issues"
      expected_commands:
        - "Thread.current"
        - "Mutex"
        - "thread_safe"
        - "concurrent_ruby"
      points: 500
      level: "star"
      problem: "Debug a race condition in concurrent User creation"
      hints:
        - "Use Thread.current to identify current thread"
        - "Monitor shared state between threads"
        - "Use synchronization primitives when needed"
      time_limit: 900
      prerequisites: ["star_production_debugging"]

    # FINAL BOSS LEVEL - üëë Jefe Final
    - key: "final_boss_complex_scenario"
      title: "Final Boss - Complex Debugging Scenario"
      description: "Solve a complex multi-layered debugging challenge"
      expected_commands:
        - "binding.pry"
        - "backtrace"
        - "step"
        - "inspect"
        - "explain"
        - "profile"
      points: 1000
      level: "final_boss"
      problem: "Debug a complex scenario involving N+1 queries, memory leaks, and validation errors"
      hints:
        - "This challenge combines multiple debugging techniques"
        - "Start with the error backtrace"
        - "Profile both memory and query performance"
        - "Use all the skills you've learned"
      time_limit: 1200
      prerequisites: ["star_concurrency_debugging"]

    - key: "final_boss_master_debugger"
      title: "Final Boss - Master Debugger"
      description: "Demonstrate mastery of all debugging tools and techniques"
      expected_commands:
        - "show-method"
        - "edit"
        - "reload!"
        - "source"
        - "help"
      points: 1000
      level: "final_boss"
      problem: "Create a custom debugging workflow and teach others"
      hints:
        - "Create helper methods for common debugging tasks"
        - "Use edit command to modify code on the fly"
        - "Document your debugging process"
        - "Share your knowledge with the community"
      time_limit: 1200
      prerequisites: ["final_boss_complex_scenario"]

  log_locations:
    pry: "~/.local/share/pry/pry_history"
    debug: "~/.local/state/rdbg/history"
    irb: "~/.irb_history"
    byebug: "~/.byebug_history"

  scoring:
    time_bonus:
      under_50_percent: 1.5
      under_25_percent: 2.0
    streak_bonus:
      5_consecutive: 1.2
      10_consecutive: 1.5
      perfect_level: 2.0
    hint_penalty: 0.9

  levels:
    rookie:
      name: "Novato"
      emoji: "üê£"
      min_points: 0
    magician:
      name: "Mago"
      emoji: "üé©"
      min_points: 200
    sorcerer:
      name: "Hechicero"
      emoji: "üîÆ"
      min_points: 500
    hero:
      name: "H√©roe"
      emoji: "ü¶∏"
      min_points: 1000
    expert:
      name: "Experto"
      emoji: "üéØ"
      min_points: 1500
    astro:
      name: "Astronauta"
      emoji: "üöÄ"
      min_points: 2300
    star:
      name: "Estrella"
      emoji: "‚≠ê"
      min_points: 3300
    final_boss:
      name: "Jefe Final"
      emoji: "üëë"
      min_points: 5300
